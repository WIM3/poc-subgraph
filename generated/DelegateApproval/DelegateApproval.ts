// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelegationApproved extends ethereum.Event {
  get params(): DelegationApproved__Params {
    return new DelegationApproved__Params(this);
  }
}

export class DelegationApproved__Params {
  _event: DelegationApproved;

  constructor(event: DelegationApproved) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get actions(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DelegationRevoked extends ethereum.Event {
  get params(): DelegationRevoked__Params {
    return new DelegationRevoked__Params(this);
  }
}

export class DelegationRevoked__Params {
  _event: DelegationRevoked;

  constructor(event: DelegationRevoked) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get actions(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DelegateApproval extends ethereum.SmartContract {
  static bind(address: Address): DelegateApproval {
    return new DelegateApproval("DelegateApproval", address);
  }

  canAddLiquidityFor(trader: Address, delegate: Address): boolean {
    let result = super.call(
      "canAddLiquidityFor",
      "canAddLiquidityFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );

    return result[0].toBoolean();
  }

  try_canAddLiquidityFor(
    trader: Address,
    delegate: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canAddLiquidityFor",
      "canAddLiquidityFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canOpenPositionFor(trader: Address, delegate: Address): boolean {
    let result = super.call(
      "canOpenPositionFor",
      "canOpenPositionFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );

    return result[0].toBoolean();
  }

  try_canOpenPositionFor(
    trader: Address,
    delegate: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canOpenPositionFor",
      "canOpenPositionFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canRemoveLiquidityFor(trader: Address, delegate: Address): boolean {
    let result = super.call(
      "canRemoveLiquidityFor",
      "canRemoveLiquidityFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );

    return result[0].toBoolean();
  }

  try_canRemoveLiquidityFor(
    trader: Address,
    delegate: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canRemoveLiquidityFor",
      "canRemoveLiquidityFor(address,address):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  candidate(): Address {
    let result = super.call("candidate", "candidate():(address)", []);

    return result[0].toAddress();
  }

  try_candidate(): ethereum.CallResult<Address> {
    let result = super.tryCall("candidate", "candidate():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApprovedActions(trader: Address, delegate: Address): i32 {
    let result = super.call(
      "getApprovedActions",
      "getApprovedActions(address,address):(uint8)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );

    return result[0].toI32();
  }

  try_getApprovedActions(
    trader: Address,
    delegate: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getApprovedActions",
      "getApprovedActions(address,address):(uint8)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(delegate)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getClearingHouseAddLiquidityAction(): i32 {
    let result = super.call(
      "getClearingHouseAddLiquidityAction",
      "getClearingHouseAddLiquidityAction():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getClearingHouseAddLiquidityAction(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getClearingHouseAddLiquidityAction",
      "getClearingHouseAddLiquidityAction():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getClearingHouseOpenPositionAction(): i32 {
    let result = super.call(
      "getClearingHouseOpenPositionAction",
      "getClearingHouseOpenPositionAction():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getClearingHouseOpenPositionAction(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getClearingHouseOpenPositionAction",
      "getClearingHouseOpenPositionAction():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getClearingHouseRemoveLiquidityAction(): i32 {
    let result = super.call(
      "getClearingHouseRemoveLiquidityAction",
      "getClearingHouseRemoveLiquidityAction():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_getClearingHouseRemoveLiquidityAction(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getClearingHouseRemoveLiquidityAction",
      "getClearingHouseRemoveLiquidityAction():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasApprovalFor(trader: Address, delegate: Address, actions: i32): boolean {
    let result = super.call(
      "hasApprovalFor",
      "hasApprovalFor(address,address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(delegate),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(actions))
      ]
    );

    return result[0].toBoolean();
  }

  try_hasApprovalFor(
    trader: Address,
    delegate: Address,
    actions: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasApprovalFor",
      "hasApprovalFor(address,address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(delegate),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(actions))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get actions(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get actions(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall extends ethereum.Call {
  get inputs(): UpdateOwnerCall__Inputs {
    return new UpdateOwnerCall__Inputs(this);
  }

  get outputs(): UpdateOwnerCall__Outputs {
    return new UpdateOwnerCall__Outputs(this);
  }
}

export class UpdateOwnerCall__Inputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall__Outputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}
